{
  "type": "lab",
  "title": "Concurrent Data Transfer with Rust Channels",
  "description": "In this lab, we explore message passing as a safe concurrency approach, using channels in Rust's standard library to send and receive data between threads.",
  "meta": {
    "title": "Using Message Passing to Transfer Data Between Threads | Rust Programming",
    "description": "Learn how to use message passing and channels in Rust to safely transfer data between threads in this Rust programming tutorial.",
    "keywords": "Rust, Concurrency, Message Passing, Channels, Multithreading, Data Transfer"
  },
  "difficulty": "Beginner",
  "time": 20,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Using Message Passing to Transfer Data Between Threads",
        "text": "step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/message_passing",
          "rust/method_syntax",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      },
      {
        "title": "Channels and Ownership Transference",
        "text": "step2.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify2.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/message_passing",
          "rust/method_syntax",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      },
      {
        "title": "Sending Multiple Values and Seeing the Receiver Waiting",
        "text": "step3.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify3.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/for_loop",
          "rust/function_syntax",
          "rust/message_passing",
          "rust/method_syntax",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      },
      {
        "title": "Creating Multiple Producers by Cloning the Transmitter",
        "text": "step4.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify4.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/for_loop",
          "rust/message_passing",
          "rust/method_syntax",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "finish.md"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/book/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/book"
  }
}
