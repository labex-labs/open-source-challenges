{
  "type": "lab",
  "title": "Handling Errors with Box in Rust",
  "description": "In this lab, the code demonstrates how to use the Box type to preserve original errors by wrapping them, allowing for dynamic error handling, and the Std library's From trait helps in converting any type that implements the Error trait into the trait object Box<Error>. It includes an example of converting and handling errors using Box with a custom error type.",
  "meta": {
    "title": "Rust Error Handling | Box Error Wrapping",
    "description": "Learn how to use the Rust Box type to preserve original errors, handle dynamic error types, and convert errors to Box<Error> with the From trait.",
    "keywords": "Rust, error handling, Box, dynamic errors, error conversion, From trait"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Boxing errors",
        "text": "step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/traits",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "finish.md"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  }
}
