{
  "type": "lab",
  "title": "Operator Overloading",
  "description": "In this lab, we explore operator overloading in Rust and how it can be achieved through traits. Operators in Rust can be overloaded using traits, which allows them to perform different tasks based on their input arguments. The `+` operator, for example, is syntactic sugar for the `add` method and can be used by any implementor of the `Add` trait. The traits that overload operators, including `Add`, can be found in `core::ops`. The provided Rust code demonstrates how to overload the `+` operator for custom types `Foo` and `Bar`, resulting in different output types `FooBar` and `BarFoo` respectively.",
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "details": {
    "steps": [
      {
        "title": "Operator Overloading",
        "text": "step1.md",
        "verify": [
          {
            "name": "Test the completion of step 1",
            "file": "verify1.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/traits"
        ]
      }
    ],
    "intro": {
      "text": "intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  }
}
