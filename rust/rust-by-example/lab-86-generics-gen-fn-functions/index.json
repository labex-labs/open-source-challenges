{
  "type": "lab",
  "title": "Functions",
  "description": "In this lab, you will learn how to define generic functions in Rust. To make a function generic, you need to prepend the type `T` with `<T>`. Sometimes, you may need to explicitly specify type parameters while calling a generic function, which can be done using the syntax `fun::<A, B, ...>()`. The code provided demonstrates the usage of generic functions in Rust and includes examples of functions that are both generic and non-generic.",
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "details": {
    "steps": [
      {
        "title": "Functions",
        "text": "step1.md",
        "verify": [
          {
            "name": "Test the completion of step 1",
            "file": "verify1.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/operator_overloading",
          "rust/type_casting"
        ]
      }
    ],
    "intro": {
      "text": "intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  }
}
