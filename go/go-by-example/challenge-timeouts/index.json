{
  "type": "challenge",
  "title": "Implementing Timeouts in Go Using Channels",
  "description": "The purpose of this challenge is to implement timeouts in Go using channels and select.",
  "meta": {
    "title": "Go Timeouts | Channels and Select",
    "description": "Learn how to implement timeouts in Go using channels and select, preventing goroutine leaks and using time.After to await a value to be sent after the timeout.",
    "keywords": "Go, Timeouts, Channels, Select, Goroutine, time.After"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Timeouts",
        "text": "step1.md",
        "verify": [
          {
            "name": "Verify First Operation Timeout Second Operation Succeed",
            "file": "verify1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["go/timeouts"],
        "solutions": ["timeouts.go"]
      }
    ],
    "intro": {
      "text": "intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "timeouts.go",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["jiaosenvip"],
  "license": {
    "name": "CC-BY-3.0",
    "url": "http://creativecommons.org/licenses/by/3.0/",
    "repo": "https://github.com/mmcgrana/gobyexample"
  }
}
