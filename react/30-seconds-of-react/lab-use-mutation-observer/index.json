{
  "type": "lab",
  "title": "React useMutationObserver Hook",
  "description": "In this lab, we will learn how to use the useMutationObserver hook in React to watch for changes made to the DOM tree using a MutationObserver. The hook allows us to specify a callback function to be executed when a change is observed, and we can also provide options to customize the observer's behavior. Through this lab, we will be able to understand how to implement the useMutationObserver hook in our React applications.",
  "meta": {
    "title": "React useMutationObserver Hook: Mastering DOM Observation in React",
    "description": "Learn how to use the useMutationObserver hook in React to watch for changes made to the DOM tree and implement dynamic functionality in your applications.",
    "keywords": "dom, usemutationobserver, react, hooks, mutation observer"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useMutationObserver Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/css_in_react",
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh",
      "title": "Introduction"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React 的 useMutationObserver 钩子",
      "description": "在本实验中，我们将学习如何在 React 中使用 useMutationObserver 钩子，通过 MutationObserver 来监听 DOM 树的变化。该钩子允许我们指定一个在观察到变化时执行的回调函数，还能提供选项来自定义观察者的行为。通过本实验，我们将理解如何在 React 应用程序中实现 useMutationObserver 钩子。",
      "meta": {
        "title": "React 的 useMutationObserver 钩子：掌握 React 中的 DOM 观察",
        "description": "学习如何在 React 中使用 useMutationObserver 钩子来监听 DOM 树的变化，并在应用程序中实现动态功能。",
        "keywords": "DOM, useMutationObserver, React, 钩子, MutationObserver"
      },
      "details": {
        "steps": [
          {
            "title": "React 的 useMutationObserver 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
