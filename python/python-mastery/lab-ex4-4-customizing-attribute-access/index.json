{
  "type": "lab",
  "title": "Customizing Attribute Access",
  "description": "In this lab, you will learn about customizing attribute access and the difference between delegation and inheritance.",
  "meta": {
    "title": "Customizing Attribute Access in Python",
    "description": "Explore techniques for customizing attribute access in Python, including delegation, inheritance, and creating read-only proxies.",
    "keywords": "setattr, proxies, python, slots, attribute access"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Slots vs. setattr",
        "text": "step1.md",
        "verify": [
          {
            "name": "Verify Python Class Inheritance and Attributes",
            "file": "verify1.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/build_in_functions",
          "python/classes_objects",
          "python/conditional_statements",
          "python/constructor",
          "python/encapsulation",
          "python/function_definition",
          "python/polymorphism",
          "python/python_shell",
          "python/raising_exceptions",
          "python/sets",
          "python/tuples"
        ]
      },
      {
        "title": "Proxies",
        "text": "step2.md",
        "verify": [
          {
            "name": "Verify Python __getattr__ and getattr Usage",
            "file": "verify2.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/build_in_functions",
          "python/classes_objects",
          "python/constructor",
          "python/data_collections",
          "python/encapsulation",
          "python/function_definition",
          "python/importing_modules",
          "python/lists",
          "python/polymorphism",
          "python/python_shell",
          "python/raising_exceptions",
          "python/tuples",
          "python/using_packages",
          "python/variables_data_types"
        ]
      },
      {
        "title": "Delegation as an alternative to inheritance",
        "text": "step3.md",
        "verify": [
          {
            "name": "Verify Python Print History",
            "file": "verify3.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/build_in_functions",
          "python/classes_objects",
          "python/constructor",
          "python/encapsulation",
          "python/function_definition",
          "python/polymorphism",
          "python/python_shell",
          "python/tuples"
        ]
      }
    ],
    "intro": {
      "text": "intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "stock.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "vnc-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "CC-BY-SA-4.0",
    "url": "https://github.com/dabeaz-course/python-mastery/blob/main/LICENSE.md",
    "repo": "https://github.com/dabeaz-course/python-mastery"
  }
}
